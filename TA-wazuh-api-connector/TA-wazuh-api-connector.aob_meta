{"field_extraction_builder": {"wazuh:api:info:basic": {"data_format": "json", "is_parsed": true}, "wazuh:api:rules": {"data_format": "json", "is_parsed": true}, "wazuh:api:decoders": {"data_format": "json", "is_parsed": true}, "wazuh:api:agents": {"is_parsed": true, "data_format": "json"}}, "validation": {"status": "job_finished", "validation_id": "v_1502855281_64", "progress": 1.0, "validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"]}, "global_settings_builder": {"global_settings": {"log_settings": {}}}, "basic_builder": {"friendly_name": "Wazuh API Connector", "author": "polkan@wazuh.com", "theme": "#65A637", "description": "", "large_icon": "", "visible": true, "tab_version": "2.2.0", "appname": "TA-wazuh-api-connector", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAIYUlEQVRYR61Ya2wVxxU+Z2Z29/rFw8g80iqNWppWgUAl6vhF07SpBOURNcFGbaq0QSVESgMUEDQBbPaaR5uIKjQFEmhDgtoqCkRpecRQ+EEqAX5QixYCrRInlZKGV0IC2Ne+uztzTjV7bbDx49ooY8mStTtnvvnOd75z1ghZ1pT1B8fZV5pXTT+f7d3+npf5BwtTbahObZz2MQDwQHGw/4eMAMhT1x9ajCgKz+eHG1oWzQizBewZj3GCv9sZrobPZyYTfvjBjuZtCzQg9gsqK6Cy2rq9Tk7eF4K2K/MakyffBvBp8EwxFvt1YxJe4jUAeP/T4PLCM3C2Hfz+YwwACGCKv+/2hOPWA9MoIK69+HHLb1pGfRoNFPA6WGa0TJQn33wEpXwJAM9q3Tar0Z/zv1tImU0XQFnyzUrhuK+x0VoI8W+IotlH/dkfDJah8c/XeWOuir8z8j1AJs2ID9VXzzwIkJFDX3H6Z6hqlyyfXLBVSPWYCToIpbJBao9Xfz8JnbfPBqw0eeCnUuIOEwUgHQ+I6Pn6mhlLBtrfDyDGijWHx7EK/waME5gMo5CAKC6YwHyvYd2s/2QRN5as3zNasvsGMJex0YTSQUb45zXd+u0z/ty2/i7TNyBmLEvWTVOu9ycdto+wSJiIlZeDRutt9TVNPwfwLeW9abfsJZNYrop/LKW3WQftucBgb8MolaYwuLdh7Q+aOgH12t8XIATfxzJRvEIqt8aEHQ4AqDgAopHK+8yYdGX96fRRmFDFAMmelz1zFxbfAUXO8IIX2ZjZwHFRCgAwKpErtDYr61dPe2bwgHxfTIE7CxNO4RYwZg6RsaBtQGBmEo5ngMxeBrlXiIz4eyxjgBC+JFA9ThSNAWbZtVe6HjLR4barnzx0auNPUoMTte+LEqdkoivUKzpMT+oKeH2zpR5Ro1Ad/ZkuEysincDOi8R7GdimTSj3vNHhAw1rZp3syyD71FDF2v0PoFB/MFFUCJC5YY/FwCiwX4PkTBViXE09l5ZeXgeF6cXH+cTOvvys5wZb6nepUSDdLQAwhw1buxjQPLOV/k3PCW2eUbwRGl504q3cT+Ct7+ju79w4zGonUVGQMLSGiZ5kE0lLcvzzOS4GIKncNkTxQhTpDY3Q1NadqcxhzDhp46HcgjStAil/QVHaY4pJ/1zBZI6K083SSVxjMM8dWzl9bfeKswfiff4RGVJqsczxqnWQzmNmiaITS28d3Bpfnbqz+uIM86zcnDSRSR5fPf3ZrqDWc0SpLJmllPqdCYLbAEjFFSHiXmOFGddH/MctMBYzEjsRspCOLQSmKFRgL8xM0s1NsYmWXjGtfzzjzw2xYsWeAhyeu4mBHiYdOAAoLAiU8j0UqgWYiph4IrNxgWz1DC2NsWakEzHQSTbcgAiTAfheBojdXyjXoBD1UZh6rCn54LsI/hFVKtqnKCF9Rrifoig2QkQ8bYhWsMSLDsqlgKKSdOQCcMa1sy1EtkYqHc8gwyGOdBIk5wDjZgK+O+6PygGJ8j1jolWpVqfu1MZpqYxQ/COqGFK3K4nbhHS+S2GahHKZjT5P2jwcGe99N2FqlOPO00GH7UvyusewzWYmu7Gfd00CFoyXI4B4fxTpJwTRBOE5W8hEX7ZtXyjXcv1OlI5+aC6eO9u8fYG+yWMYK1bszad89YqUzgwTpiVKJQHoAiP+jMxnx6UYuUo6iSd02J7DxHE7icVvR9Iu8VMsGpaOFxCZv1wzOY+PwFQxKncL6eBrzEAope3+zVEQPtqUnPkO+CzAzxht97LODGX+rpHCGbYOGX9kdJiPIv5pYYCVV/91Yt+IyaULEHG50eEXYzTMTcjcAohjUYipZIwjlHOVAV6+fC3wRxbIEolqI5PJpEkqI5U6zFGw6ig1n85k6MZI24fPMJavOVQkPLGEjFkEFHo2FyjVfwHIv6Lbdo9whlUCYBIBoigylQEE51wpRypULwp0yomiXwfGbMtR6lsg1a8oCr7KxCyUg8DwOgDXHKtufBdgTdwK+nbqns0Kp/j7c3KUuxQE1lIUkN2pnESrNnqZZxI7A0zfL4AIXf4Ha3yaFL6K7VqB6048Z7xXb1PBTKWc30bp9nGAFowrmOnloLVtafMzc6/2VxMDObF9xlPXH1xGZGw7ybU2K728dtL6l5cumR0tF9p0+aT8BYC4mQ29cI1znyoCSEcyPQOl85wJOu5AAQRChoiwvdWTq08tn9be3ZlvBpa1NdznH0kEomM+Aj/FTGNjT1DuJTJ6KwJcAMRaZh6LKC4T83pkSAkllxsdfcVeSEjVCgBb21O06aTXdDnbF0tWQJ2tJS+E1koQ4llmHmWrXEjVwcDEZPJiwxQIKJT1ESIy+ZZNlKKNEddISTuPPj3zSn9fGoPQ0M1EMo5feMAdXcQbhOMtMUF7rKn4Nl0TQdxgMkNY/FspZEMbr3FqdRVUab+zrLP6abYXOp/HZ1es3nMne04jEw1jsuNA7zYS9y4pWAj1kdY0vdGfcXaQZ8SvDSZlNxoxAJevO7ANGOaziSxHvaZCC0gqRSjkn/lq+sljz55MDeXze8iASmvrKiTAX4mpkIl6z0wIRij3CmmzsP7t1C7YPTfu8INlaSiArKOKb8DkYflO7u+JzIOktegjbSSV1xBGel4TnmjJVlVDLvubNiBU7RLldxc8IgRuMjos6PpEivWd6e6RFXPw0ehk8/ZvRoNlprsuhrbHZ1ECB77ueOolCoPiuMnG81881JF0EhdI66rj1dMbBvo/0K04db9Axy+s80YXQY2QcpkO0w4ixl+mwvEEkHk9/aF5tHn77I6haOfWGcrkBkvX1t0jhdhHOhrVWW22kyOCmXWsevaBgdrDQCn5P7VeU2GGrVfhAAAAAElFTkSuQmCC", "tab_build_no": "12", "version": "1.0.0", "build_no": 2}, "sourcetype_builder": {"wazuh:api:info:basic": {"metadata": {"event_count": 0, "cims_count": 0, "data_input_name": "wazuh_api_info_basic", "extractions_count": 0}}, "wazuh:api:rules": {"metadata": {"event_count": 0, "cims_count": 0, "data_input_name": "wazuh_api_rules", "extractions_count": 0}}, "wazuh:api:decoders": {"metadata": {"event_count": 0, "cims_count": 0, "data_input_name": "wazuh_api_decoders", "extractions_count": 0}}, "wazuh:api:agents": {"metadata": {"event_count": 0, "cims_count": 0, "data_input_name": "wazuh_api_agents", "extractions_count": 0}}}, "data_input_builder": {"datainputs": [{"name": "wazuh_api_info_basic", "uuid": "c97e652c50ba4770855982e0b6116a0b", "use_external_validation": true, "index": "default", "type": "customized", "streaming_mode_xml": true, "title": "wazuh:api:info:basic", "customized_options": [{"name": "username", "value": "foo"}, {"name": "base_url", "value": "http://10.0.0.51:55000"}], "interval": "30", "data_inputs_options": [{"title": "USERNAME", "placeholder": "", "required_on_edit": false, "name": "username", "format_type": "text", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "Usually: foo"}, {"title": "PASSWORD", "placeholder": "", "required_on_edit": false, "name": "password", "format_type": "password", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "Usually: bar"}, {"title": "WAZUH MANAGER IP + API PORT", "placeholder": "", "required_on_edit": false, "name": "base_url", "format_type": "text", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "http://WAZUH_MANAGER:55000"}], "description": "", "sourcetype": "wazuh:api:info:basic", "parameters": [{"name": "username", "placeholder": "", "format_type": "text", "value": "", "default_value": "", "type": "text", "label": "USERNAME", "help_string": "Usually: foo", "required": true}, {"name": "password", "placeholder": "", "format_type": "password", "value": "", "default_value": "", "type": "password", "label": "PASSWORD", "help_string": "Usually: bar", "required": true}, {"name": "base_url", "placeholder": "", "format_type": "text", "value": "", "default_value": "", "type": "text", "label": "WAZUH MANAGER IP + API PORT", "help_string": "http://WAZUH_MANAGER:55000", "required": true}], "code": "import json\r\nimport requests\r\n\r\ndef validate_input(helper, definition):\r\n    pass\r\n\r\ndef collect_events(helper, ew):\r\n    opt_username = helper.get_arg('username')\r\n    opt_password = helper.get_arg('password')\r\n    opt_base_url = helper.get_arg('base_url')\r\n\r\n    auth = requests.auth.HTTPBasicAuth(opt_username, opt_password)\r\n    verify = False\r\n\r\n    request = requests.get(opt_base_url + '/manager/info', auth=auth, verify=verify)\r\n    manager_info = json.loads(request.text)['data']\r\n\r\n    request = requests.get(opt_base_url + '/manager/status', auth=auth, verify=verify)\r\n    manager_status = json.loads(request.text)['data']\r\n\r\n    request = requests.get(opt_base_url + '/agents/summary', auth=auth, verify=verify)\r\n    agent_summary = json.loads(request.text)['data']\r\n\r\n    data = {}\r\n    for key in manager_info:\r\n        data['manager-info_' + key.lower()] = manager_info[key]\r\n\r\n    for key in manager_status:\r\n        data['manager-status_' + key.lower()] = manager_status[key]\r\n\r\n    for key in agent_summary:\r\n        data['agent_summary_' + key.lower().replace(' ', '')] = agent_summary[key]\r\n\r\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(data))\r\n    ew.write_event(event)"}, {"name": "wazuh_api_decoders", "streaming_mode_xml": true, "sample_count": 0, "use_external_validation": true, "index": "default", "type": "customized", "description": "", "title": "wazuh:api:decoders", "customized_options": [{"name": "username", "value": "foo"}, {"name": "base_url", "value": "http://10.0.0.51:55000"}], "interval": "30", "data_inputs_options": [{"title": "USERNAME", "placeholder": "", "required_on_edit": false, "name": "username", "format_type": "text", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "Usually: foo"}, {"title": "PASSWORD", "placeholder": "", "required_on_edit": false, "name": "password", "format_type": "password", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "Usually: bar"}, {"title": "WAZUH MANAGER IP + API PORT", "placeholder": "", "required_on_edit": false, "name": "base_url", "format_type": "text", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "http://WAZUH_MANAGER:55000"}], "code": "# encoding = utf-8\r\n\r\nimport json\r\nimport requests\r\n\r\ndef validate_input(helper, definition):\r\n    pass\r\n\r\ndef collect_events(helper, ew):\r\n    opt_username = helper.get_arg('username')\r\n    opt_password = helper.get_arg('password')\r\n    opt_base_url = helper.get_arg('base_url')\r\n    \r\n    auth = requests.auth.HTTPBasicAuth(opt_username, opt_password)\r\n    verify = False\r\n\r\n    request = requests.get(opt_base_url + '/decoders?limit=1', auth=auth, verify=verify)\r\n    decoders_qty = json.loads(request.text)[\"data\"][\"totalItems\"]\r\n\r\n    request = requests.get(opt_base_url + '/decoders?offset=0&limit=' + str(decoders_qty), auth=auth, verify=verify)\r\n    decoders = json.loads(request.text)[\"data\"][\"items\"]\r\n\r\n    for row in decoders:\r\n        data = {}\r\n        for key in row:\r\n            if isinstance(row[key], dict):\r\n                for detail in row[key]:\r\n                    data[key + \"-\" + detail] = row[key][detail]\r\n            elif isinstance(row[key], list):\r\n                count = 0\r\n                for detail in row[key]:\r\n                    data[str(key) + \"-\" + str(count)] = detail\r\n                    count += 1\r\n            else:\r\n                data[key] = row[key]\r\n        data = json.dumps(data)\r\n        event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\r\n        ew.write_event(event)", "sourcetype": "wazuh:api:decoders", "parameters": [{"name": "username", "placeholder": "", "format_type": "text", "value": "foo", "default_value": "", "type": "text", "label": "USERNAME", "help_string": "Usually: foo", "required": true}, {"name": "password", "placeholder": "", "format_type": "password", "value": "bar", "default_value": "", "type": "password", "label": "PASSWORD", "help_string": "Usually: bar", "required": true}, {"name": "base_url", "placeholder": "", "format_type": "text", "value": "http://10.0.0.51:55000", "default_value": "", "type": "text", "label": "WAZUH MANAGER IP + API PORT", "help_string": "http://WAZUH_MANAGER:55000", "required": true}], "uuid": "0087a62e55da49a29459722074718824"}, {"name": "wazuh_api_rules", "uuid": "45be1d810c7a432b8e737c0caaec7955", "use_external_validation": true, "index": "default", "type": "customized", "streaming_mode_xml": true, "title": "wazuh:api:rules", "customized_options": [{"name": "username", "value": "foo"}, {"name": "base_url", "value": "http://10.0.0.51:55000"}], "interval": "30", "data_inputs_options": [{"title": "USERNAME", "placeholder": "", "required_on_edit": false, "name": "username", "format_type": "text", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "Usually: foo"}, {"title": "PASSWORD", "placeholder": "", "required_on_edit": false, "name": "password", "format_type": "password", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "Usually: bar"}, {"title": "WAZUH MANAGER IP + API PORT", "placeholder": "", "required_on_edit": false, "name": "base_url", "format_type": "text", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "http://WAZUH_MANAGER:55000"}], "description": "", "sourcetype": "wazuh:api:rules", "parameters": [{"name": "username", "placeholder": "", "format_type": "text", "value": "", "default_value": "", "type": "text", "label": "USERNAME", "help_string": "Usually: foo", "required": true}, {"name": "password", "placeholder": "", "format_type": "password", "value": "", "default_value": "", "type": "password", "label": "PASSWORD", "help_string": "Usually: bar", "required": true}, {"name": "base_url", "placeholder": "", "format_type": "text", "value": "", "default_value": "", "type": "text", "label": "WAZUH MANAGER IP + API PORT", "help_string": "http://WAZUH_MANAGER:55000", "required": true}], "code": "# encoding = utf-8\r\n\r\nimport json\r\nimport requests\r\n\r\ndef validate_input(helper, definition):\r\n    pass\r\n\r\ndef collect_events(helper, ew):\r\n    opt_username = helper.get_arg('username')\r\n    opt_password = helper.get_arg('password')\r\n    opt_base_url = helper.get_arg('base_url')\r\n    \r\n    auth = requests.auth.HTTPBasicAuth(opt_username, opt_password)\r\n    verify = False\r\n\r\n    request = requests.get(opt_base_url + '/rules?limit=1', auth=auth, verify=verify)\r\n    rules_qty = json.loads(request.text)[\"data\"][\"totalItems\"]\r\n\r\n    request = requests.get(opt_base_url + '/rules?offset=0&limit=' + str(rules_qty), auth=auth, verify=verify)\r\n    rules = json.loads(request.text)[\"data\"][\"items\"]\r\n\r\n    for row in rules:\r\n        data = {}\r\n        for key in row:\r\n            if isinstance(row[key], dict):\r\n                for detail in row[key]:\r\n                    data[key + \"-\" + detail] = row[key][detail]\r\n            elif isinstance(row[key], list):\r\n                count = 0\r\n                for detail in row[key]:\r\n                    data[str(key) + \"-\" + str(count)] = detail\r\n                    count += 1\r\n            else:\r\n                data[key] = row[key]\r\n        data = json.dumps(data)\r\n        event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\r\n        ew.write_event(event)"}, {"name": "wazuh_api_agents", "uuid": "4eccf368a9f347f28cbfc971dad7427e", "type": "customized", "index": "default", "use_external_validation": true, "streaming_mode_xml": true, "title": "wazuh:api:agents", "customized_options": [{"name": "username", "value": "foo"}, {"name": "base_url", "value": "http://10.0.0.51:55000"}], "interval": "30", "data_inputs_options": [{"title": "USERNAME", "placeholder": "", "required_on_edit": false, "name": "username", "format_type": "text", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "Usually: foo"}, {"title": "PASSWORD", "placeholder": "", "required_on_edit": false, "name": "password", "format_type": "password", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "Usually: bar"}, {"title": "WAZUH MANAGER IP + API PORT", "placeholder": "", "required_on_edit": false, "name": "base_url", "format_type": "text", "required_on_create": true, "type": "customized_var", "default_value": "", "description": "http://WAZUH_MANAGER:55000"}], "description": "", "sourcetype": "wazuh:api:agents", "parameters": [{"name": "username", "placeholder": "", "format_type": "text", "value": "", "default_value": "", "type": "text", "label": "USERNAME", "help_string": "Usually: foo", "required": true}, {"name": "password", "placeholder": "", "format_type": "password", "value": "", "default_value": "", "type": "password", "label": "PASSWORD", "help_string": "Usually: bar", "required": true}, {"name": "base_url", "placeholder": "", "format_type": "text", "value": "", "default_value": "", "type": "text", "label": "WAZUH MANAGER IP + API PORT", "help_string": "http://WAZUH_MANAGER:55000", "required": true}], "code": "\r\n# encoding = utf-8\r\n\r\nimport json\r\nimport requests\r\n\r\ndef validate_input(helper, definition):\r\n    pass\r\n\r\ndef collect_events(helper, ew):\r\n    opt_username = helper.get_arg('username')\r\n    opt_password = helper.get_arg('password')\r\n    opt_base_url = helper.get_arg('base_url')\r\n    auth = requests.auth.HTTPBasicAuth(opt_username, opt_password)\r\n    verify = False\r\n\r\n    request = requests.get(opt_base_url + '/agents?limit=0', auth=auth, verify=verify)\r\n    agents_qty = json.loads(request.text)[\"data\"][\"totalItems\"]\r\n\r\n    request = requests.get(opt_base_url + '/agents?offset=0&limit=' + str(agents_qty), auth=auth, verify=verify)\r\n    agents = json.loads(request.text)[\"data\"][\"items\"]\r\n\r\n    for row in agents:\r\n        data = {}\r\n        request = requests.get(opt_base_url + '/agents/' + row[\"id\"], auth=auth, verify=verify)\r\n        agent_info = json.loads(request.text)[\"data\"]\r\n\r\n        request = requests.get(opt_base_url + '/rootcheck/' + row[\"id\"] + '/last_scan', auth=auth, verify=verify)\r\n        rootcheck_lastscan = json.loads(request.text)[\"data\"][\"start\"]\r\n\r\n        request = requests.get(opt_base_url + '/syscheck/' + row[\"id\"] + '/last_scan', auth=auth, verify=verify)\r\n        syscheck_lastscan = json.loads(request.text)[\"data\"][\"start\"]\r\n\r\n        keys = [\"id\", \"status\", \"name\", \"ip\", \"dateAdd\", \"version\", \"os_family\", \"lastKeepAlive\", \"os\"]\r\n\r\n        data = {}\r\n        for key in keys:\r\n            if key in agent_info:\r\n                data[key] = agent_info[key]\r\n\r\n        data[\"last_rootcheck\"] = rootcheck_lastscan\r\n        data[\"las_syscheck\"] = syscheck_lastscan\r\n\r\n        event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(data))\r\n        ew.write_event(event)"}]}}